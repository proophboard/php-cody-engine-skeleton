version: '2.4'

services:
  #
  # [ app definition ]
  #
  # These are the services for this app
  #
  nginx:
    image: prooph/nginx:www
    mem_limit: 128m
    ports:
      - 8080:80
      - 443:443

  php:
    image: prooph/php:8.0-fpm
    mem_limit: 768m
    volumes:
      - ./app:/var/www
    #user: ${UID}
    env_file:
      - ./app/app.env

  pb-ces-worker:
    image: prooph/php:8.0-cli
    mem_limit: 1000m
    volumes:
      - ./app:/app
    user: ${UID}
    env_file:
      - ./app/app.env

  #
  # [ app definition for local development ]
  #
  # These are the services for local development of this app
  #
  pb-ces-test:
    image: prooph/php:8.0-cli
    volumes:
      - ./app:/app
    user: ${UID}
    env_file:
      - ./app/app.env

  pb-ces-composer:
    image: prooph/composer:8.0
    volumes:
      - ./app:/app
    # user: ${UID} # uncomment if needed for token due Github API limit
    command: install

  # [ Cockpit definition ]
  #
  # Cockpit
  #
  pb-ces-cockpit:
    image: proophsoftware/event-engine-cockpit:latest
    ports:
      # Note: if you need to change the port 4444 to something else, you also need to change it in ee-cockpit.config.js
      - 4444:443
    volumes:
      - ./app/ee-cockpit.config.js:/var/www/ee-cockpit.config.js
      # Add reverse proxy config for EE backend to avoid CORS issues
      - ./app/env/cockpit/nginx/config/www.conf:/etc/nginx/conf.d/www.conf

  # [ Cody definition ]
  #
  # Cody
  #
  pb-ces-cody:
    image: prooph/php:8.0-cli
    volumes:
      - ./cody:/app
      # mount your business application folder to /service
      - ./app:/service
    user: ${UID}
    ports:
      - 3311:8080
    command: vendor/bin/php-watcher public/index.php

  pb-ces-composer-cody:
    image: prooph/composer:8.0
    volumes:
      - ./cody:/app
    # user: ${UID} # not possible due Github API limit, needs token
    command: install

  #
  # [ Postgres definition ]
  #
  # Mock for Postgres cluster.
  #
  postgres:
    image: postgres:13.3-alpine3.14
    ports:
      - 5432:5432
    volumes:
      - ./env/postgres/initdb.d:/docker-entrypoint-initdb.d:ro
      - pb-ces-postgres-data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: "event_engine"
      POSTGRES_USER: "dev"
      POSTGRES_PASSWORD: "dev"
    command: "-c 'max_connections=200'"


#
# [ volumes definition ]
#
# creates Docker volumes which can be mounted by other containers too e.g. for backup
#
volumes:
  pb-ces-postgres-data:
    driver: local
